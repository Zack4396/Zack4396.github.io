[{"categories":null,"content":"本文介绍了如何使用 sysstat ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:0:0","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 获取源码仓库地址：Github, 最新版本是 V12.7.5 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:1:0","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 下载 wget https://github.com/sysstat/sysstat/archive/refs/tags/v12.7.5.tar.gz ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:1:1","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 解压 tar -zxvf v12.7.5.tar.gz -C . \u0026\u0026 cd sysstat-12.7.5 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:1:2","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 编译源码","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:2:0","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 编译 x86略 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:2:1","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 编译 aarch64 # 指定 对应平台的 GCC 路径 MY_CC=/opt/toolchain/aarch64/bin/aarch64-cros-linux-gnu-gcc MY_HOST=\"$(echo $(basename $MY_CC) | sed 's/-gcc$//')\" MY_CXX=\"$(dirname $MY_CC)/$MY_HOST-g++\" export PATH=$PATH:\"$(dirname $MY_CC)\" mkdir output export SA_DIR=`pwd`/output/var/log/sa export conf_dir=`pwd`/output/etc/kksysconfig # NOTE # v11.1.2 之前 (2015年), 使用 --disable-man-group # v11.1.3 之后 (最新版), 使用 --disable-file-attr ./configure \\ CC=$MY_HOST_CC \\ --prefix=`pwd`/output --host=$MY_HOST \\ --disable-file-attr \\ --disable-documentation # 更正路径为设备端的路径 \"/data/output\" sed -i '/-DSA_DIR=\\\\\\\"$(SA_DIR)\\\\\\\" -DSADC_PATH=\\\\\\\"$(SADC_PATH)\\\\\\\"/i\\MY_TEMP = /data/output' Makefile sed -i 's/-DSA_DIR=\\\\\\\"$(SA_DIR)\\\\\\\" -DSADC_PATH=\\\\\\\"$(SADC_PATH)\\\\\\\"/-DSA_DIR=\\\\\\\"$(MY_TEMP)\\\\\\\" -DSADC_PATH=\\\\\\\"$(MY_TEMP)\\/lib\\/sa\\/sadc\\\\\\\"/' Makefile make clean \u0026\u0026 make \u0026\u0026 make install unset SA_DIR unset conf_dir 编译生成文件 xx@xx:~/linux-tools/sysstat-12.7.5$ tree output output/ ├── bin │ ├── cifsiostat │ ├── iostat │ ├── mpstat │ ├── pidstat │ ├── sadf │ ├── sar │ └── tapestat ├── etc │ └── kksysconfig │ ├── sysstat │ └── sysstat.ioconf ├── lib │ └── sa │ ├── sa1 │ ├── sa2 │ └── sadc ├── share │ └── doc │ └── sysstat-12.7.5 └── var └── log └── sa 11 directories, 12 files 使用方法 # 推送工具到设备 adb push output /data/ # 修改权限 chmod -R 755 /data/output ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:2:2","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 工具使用","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:3:0","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 命令行参数 iostat # 基本用法 iostat [ 选项 ] [ \u003c时间间隔\u003e ] [ \u003c次数\u003e ] -c：显示 CPU 使用情况。 -d：显示磁盘 I/O 使用情况。 -k：以 KB/s 为单位显示数据传输速率。 -m：以 MB/s 为单位显示数据传输速率。 -t：显示时间戳。 tps 表示每秒完成的传输数量（Transactions Per Second） MB_read/s 表示每秒读取的数据量（Megabytes Read Per Second） MB_wrtn/s 表示每秒写入的数据量（Megabytes Written Per Second） MB_dscd/s 表示每秒丢弃（或丢失）的数据量（Megabytes Discarded Per Second） MB_read、MB_wrtn 和 MB_dscd 分别表示自系统启动以来的总读取、写入和丢弃的数据量（Megabytes Read/Written/Discarded） # 查看 CPU 使用情况 iostat -c # 查看 磁盘使用I/O使用情况 iostat -d pidstat # 基本用法 pidstat [ 选项 ] [ \u003c时间间隔\u003e ] [ \u003c次数\u003e ] # 查看所有进程的 CPU 使用情况（ -u -p ALL） pidstat -u -p ALL # 统计CPU使用情况 pidstat -u # 统计内存使用情况 pidstat -r sar # 基本用法 sar [ 选项 ] [ \u003c时间间隔\u003e ] [ -o \u003c次数\u003e ] # 统计CPU利用率 -u [ ALL ] # 例如: (间隔1s, 抓6次) sar -u ALL 1 -o 6 # 统计内存利用率 -r [ ALL ] # 例如: (间隔1s, 抓6次) sar -r ALL 1 -o 6 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:3:1","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":" 用途 分析系统 iostat 监视系统的磁盘 I/O 使用情况 它提供了有关磁盘读写操作、吞吐量、延迟和使用率等方面的信息。iostat 还可以帮助识别磁盘瓶颈和性能问题。 mpstat 监视系统的 CPU 使用情况 它提供了有关每个 CPU 核心的使用率、上下文切换、中断和软中断等信息。mpstat 还可以显示平均负载、用户态和内核态 CPU 时间等指标。 pidstat 监视进程的 CPU 使用情况 它可以显示每个进程的 CPU 使用率、上下文切换、内存使用情况和其他性能指标。pidstat 还可以按照进程名称、用户、PID 等进行过滤和排序。 sar 用于收集、报告和分析系统性能数据 (System Activity Reporter ) 它可以提供有关 CPU、内存、磁盘、网络和其他子系统的统计信息 iostat 日志 # 模拟读写磁盘操作 /data # stressapptest -s 86400 -M 32 -f /cache/temp1 -f /cache/temp2 -m 0 -l /data/testfile \u0026 # 每隔1秒打印磁盘I/O使用情况 (单位为 MB) /data/output/bin # ./iostat -d -m 1 Device tps MB_read/s MB_wrtn/s MB_dscd/s MB_read MB_wrtn MB_dscd mmcblk0 27.62 2.38 2.41 0.00 12938 13072 0 ... Device tps MB_read/s MB_wrtn/s MB_dscd/s MB_read MB_wrtn MB_dscd mmcblk0 185.00 16.00 17.12 0.00 16 17 0 mpstat 日志 /data/output/bin # ./mpstat Linux 4.19.69-gc3a2d66af7e9 (Chromecast) 01/01/70 _aarch64_ (2 CPU) 01:02:21 CPU %usr %nice %sys %iowait %irq %soft %steal %guest %gnice %idle 01:02:21 all 7.41 0.01 8.71 0.01 0.58 0.61 0.00 0.00 0.00 82.67 pidstat 日志 /data/output/bin # ./pidstat Linux 4.19.69-gc3a2d66af7e9 (Chromecast) 01/01/70 _aarch64_ (2 CPU) 00:11:22 UID PID %usr %system %guest %wait %CPU CPU Command 00:11:22 0 1 0.01 0.54 0.00 0.04 0.55 1 init 00:11:22 0 2 0.00 0.00 0.00 0.00 0.00 1 kthreadd 00:11:22 0 7 0.00 0.00 0.00 0.00 0.00 1 kworker/u4:0-events_unbound 00:11:22 0 9 0.00 0.02 0.00 0.03 0.02 0 ksoftirqd/0 00:11:22 0 10 0.01 0.12 0.00 0.22 0.13 1 rcu_preempt 00:11:22 0 11 0.01 0.06 0.00 0.24 0.08 1 rcu_sched sar 日志 /data/output/bin # ./sar -u ALL 1 -o 6 Linux 4.19.69-gc3a2d66af7e9 (Chromecast) 01/01/70 _aarch64_ (2 CPU) 00:13:49 CPU %usr %nice %sys %iowait %steal %irq %soft %guest %gnice %idle 00:13:50 all 10.95 0.00 12.94 0.00 0.00 0.50 1.00 0.00 0.00 74.63 00:13:51 all 10.05 0.00 10.55 0.00 0.00 1.01 1.01 0.00 0.00 77.39 00:13:52 all 9.09 0.00 11.62 0.00 0.00 0.51 0.51 0.00 0.00 78.28 00:13:53 all 1.01 0.00 1.01 0.00 0.00 0.00 0.50 0.00 0.00 97.49 00:13:54 all 9.00 0.00 10.50 0.00 0.00 1.00 0.50 0.00 0.00 79.00 00:13:55 all 10.20 0.00 13.27 0.00 0.00 1.02 0.51 0.00 0.00 75.00 Average: all 8.38 0.00 9.97 0.00 0.00 0.67 0.67 0.00 0.00 80.30 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/sysstat/:3:2","tags":["sysstat"],"title":"sysstat","uri":"/documentation/operating-system/001-linux/099-tools/sysstat/"},{"categories":null,"content":"本文介绍了如何使用 stream ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:0:0","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 获取源码仓库地址：Github ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:1:0","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 下载 wget https://github.com/jeffhammond/STREAM/archive/refs/heads/master.zip ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:1:1","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 解压 unzip master.zip \u0026\u0026 cd STREAM-master ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:1:2","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 编译源码","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:2:0","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 编译参数介绍 -mcmodel -mcmodel 参数 含义 -mcmodel=large 无限制寻址 -mcmodel=small 不大于 4GB 寻址 -mcmodel=tiny 不大于 1MB 寻址 -DSTREAM_ARRAY_SIZE -DSTREAM_ARRAY_SIZE 参数 含义 -DSTREAM_ARRAY_SIZE=0xa00000 每个测试数组的成员个数为 0xa00000（表示 10MB），有a[],b[],c[]三个数组， 它们的数据类型均为双精度浮点数 double（占用 8 字节）。 因此，进行测试时，需要申请总共 10MB _ 3 _ 8 = 240MB 的内存空间 STREAM_ARRAY_SIZE * 24 需要小于系统可用内存 (可使用 free 查看) STREAM_ARRAY_SIZE 需要大于 CPU L3 Cache 大小 (512KB ~ 4MB 不等) 如果 Copy/Scale/Add/Triad 的测试时间 Avg/Min/Max 小于 20us, 可以适当增加 STREAM_ARRAY_SIZE 的大小 ------------------------------------------------------------- Function Best Rate MB/s Avg time Min time Max time Copy: 412316.9 0.000002 0.000001 0.000006 Scale: 412316.9 0.000002 0.000001 0.000005 Add: 618475.3 0.000002 0.000001 0.000003 Triad: 618475.3 0.000002 0.000001 0.000003 ------------------------------------------------------------- -DNTIMES 测试的循环次数 (默认值是 10) -DOFFSET 数组的偏移 (默认值是 0) ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:2:1","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 编译 x86 避免 OOM 或者 Segmentation fault, STREAM_ARRAY_SIZE 不能设置过大 # STREAM_ARRAY_SIZE 96MB (实际需要2304MB) gcc \\ -O3 \\ -mcmodel=large \\ -fopenmp \\ -DSTREAM_ARRAY_SIZE=0x6000000 \\ -DNTIMES=30 \\ -DOFFSET=4096 \\ stream.c -o stream ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:2:2","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 编译 aarch64 # 指定 对应平台的 GCC 路径 MY_CC=/opt/toolchain/aarch64/bin/aarch64-cros-linux-gnu-gcc 避免 OOM 或者 Segmentation fault, STREAM_ARRAY_SIZE 不能设置过大 # STREAM_ARRAY_SIZE 10MB (实际需要240MB) $MY_CC -static \\ -O3 \\ -mcmodel=small \\ -fopenmp \\ -DSTREAM_ARRAY_SIZE=0xa00000 \\ -DNTIMES=30 \\ -DOFFSET=4096 \\ stream.c -o stream ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:2:3","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 工具使用","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:3:0","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 命令行参数无 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:3:1","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":" 用途 测试内存 注意 关于测试日志，有几点我们可以关注一下 内存读写速度 Copy/Scale/Add/Triad Function Best Rate MB/s Avg time Min time Max time Copy: 62398.0 0.027506 0.025812 0.034243 Scale: 51210.2 0.032904 0.031451 0.038471 Add: 53945.9 0.046618 0.044784 0.052294 Triad: 53983.6 0.046919 0.044753 0.054359 # 查看处理器个数 grep -c ^processor /proc/cpuinfo # [可选] 设定多线程个数 (有几个设置几个) # 若不设置，则默认使用最大线程数。 export OMP_NUM_THREADS=2 /data # stream 日志 /data # stream ------------------------------------------------------------- STREAM version $Revision: 5.10 $ ------------------------------------------------------------- This system uses 8 bytes per array element. ------------------------------------------------------------- Array size = 100663296 (elements), Offset = 4096 (elements) Memory per array = 768.0 MiB (= 0.8 GiB). Total memory required = 2304.0 MiB (= 2.2 GiB). Each kernel will be executed 30 times. The *best* time for each kernel (excluding the first iteration) will be used to compute the reported bandwidth. ------------------------------------------------------------- Number of Threads requested = 20 Number of Threads counted = 20 ------------------------------------------------------------- Your clock granularity/precision appears to be 1 microseconds. Each test below will take on the order of 26879 microseconds. (= 26879 clock ticks) Increase the size of the arrays if this shows that you are not getting at least 20 clock ticks per test. ------------------------------------------------------------- WARNING -- The above is only a rough guideline. For best results, please be sure you know the precision of your system timer. ------------------------------------------------------------- Function Best Rate MB/s Avg time Min time Max time Copy: 62398.0 0.027506 0.025812 0.034243 Scale: 51210.2 0.032904 0.031451 0.038471 Add: 53945.9 0.046618 0.044784 0.052294 Triad: 53983.6 0.046919 0.044753 0.054359 ------------------------------------------------------------- Solution Validates: avg error less than 1.000000e-13 on all three arrays ------------------------------------------------------------- ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stream/:3:2","tags":["stream"],"title":"stream","uri":"/documentation/operating-system/001-linux/099-tools/stream/"},{"categories":null,"content":"本文介绍了如何使用 memtester ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:0:0","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 获取源码仓库地址：pyropus.ca, 最新版本是 V4.6.0 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:1:0","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 下载 wget https://pyropus.ca./software/memtester/old-versions/memtester-4.6.0.tar.gz ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:1:1","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 解压 tar -zxvf memtester-4.6.0.tar.gz -C . \u0026\u0026 cd memtester-4.6.0 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:1:2","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 编译源码","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:2:0","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 编译 x86 make clean \u0026\u0026 make # 查看生成文件 ls memtester ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:2:1","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 编译 aarch64 # 指定 对应平台的 GCC 路径 MY_CC=/opt/toolchain/aarch64/bin/aarch64-cros-linux-gnu-gcc # 修改编译脚本 sed -i s@cc@\\$MY_CC@g ./conf-cc ./conf-ld make clean \u0026\u0026 make MY_CC=$MY_CC # 查看生成文件 ls memtester ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:2:2","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 工具使用","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:3:0","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 命令行参数 /data # memtester --help Usage: memtester [-p physaddrbase [-d device]] \u003cmem\u003e[B|K|M|G] [loops] - mem 申请测试内存的数量，单位默认是megabytes(兆)，也可以是B K M G。 - loops 测试的次数，默认是无限 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:3:1","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":" 用途 测试内存 # 指定 # - 起始地址 0x38000000 # - 内存大小 16M # - 循环次数 2 memtester -p 0x38000000 16M 2 # 循环测试 memtester 16M 日志 /data # memtester 16M 1 memtester version 4.6.0 (64-bit) Copyright (C) 2001-2020 Charles Cazabon. Licensed under the GNU General Public License version 2 (only). pagesize is 4096 pagesizemask is 0xfffffffffffff000 want 16MB (16777216 bytes) got 16MB (16777216 bytes), trying mlock ...locked. Loop 1/1: Stuck Address : ok Random Value : ok Compare XOR : ok Compare SUB : ok Compare MUL : ok Compare DIV : ok Compare OR : ok Compare AND : ok Sequential Increment: ok Solid Bits : ok Block Sequential : ok Checkerboard : ok Bit Spread : ok Bit Flip : ok Walking Ones : ok Walking Zeroes : ok 8-bit Writes : ok 16-bit Writes : ok Done. ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/memtester/:3:2","tags":["memtester"],"title":"memtester","uri":"/documentation/operating-system/001-linux/099-tools/memtester/"},{"categories":null,"content":"本文介绍了如何使用 dhrystone ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:0:0","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 获取源码仓库地址：fossies.org, 最新版本是 V2.1 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:1:0","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 下载 wget https://fossies.org/linux/privat/old/dhrystone-2.1.tar.gz ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:1:1","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 解压 mkdir dhrystone tar -zxvf dhrystone-2.1.tar.gz -C dhrystone cd dhrystone ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:1:2","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 编译源码","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:2:0","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 编译 x86 gcc -c -O2 -fno-inline dhry_1.c -o dhry_1.o -DTIME gcc -c -O2 -fno-inline dhry_2.c -o dhry_2.o gcc -o dhrystone dhry_1.o dhry_2.o ls dhrystone ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:2:1","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 编译 aarch64 # 指定 对应平台的 GCC 路径 MY_CC=/opt/toolchain/aarch64/bin/aarch64-cros-linux-gnu-gcc $MY_CC -c -O2 -fno-inline dhry_1.c -o dhry_1.o -DTIME $MY_CC -c -O2 -fno-inline dhry_2.c -o dhry_2.o $MY_CC -o dhrystone dhry_1.o dhry_2.o ls dhrystone ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:2:2","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 工具使用","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:3:0","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 命令行参数 无 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:3:1","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":" 用途 测试 CPU 单核性能 注意 关于测试日志，有几点我们可以关注一下 Dhrystones per Second 其数值表示每秒钟执行 Dhrystone 的次数 Dhrystones per Second: 71332960.0 MIPS 其数值表示每秒钟执行 Dhrystone 的次数除以一百万 MIPS: 71.33 DhrystoneMIPS 其数值表示每秒钟执行 Dhrystone 的次数除以 1757 注：1757 (这一数值来自于 VAX 11/780机器，此机器在名义上为1MIPS机器，它每秒运行Dhrystone次数为1757次) DMIPS: 40599.3 /data # ./dhrystone ... Please give the number of runs through the benchmark: [***此处需要设置运行次数***] ... 日志 /data # ./dhrystone 500000000000 Dhrystone Benchmark, Version 2.1 (Language: C) Program compiled without 'register' attribute Please give the number of runs through the benchmark: 50000000000000000 Execution starts, 784662528 runs through Dhrystone Execution ends Final values of the variables used in the benchmark: Int_Glob: 5 should be: 5 Bool_Glob: 1 should be: 1 Ch_1_Glob: A should be: A Ch_2_Glob: B should be: B Arr_1_Glob[8]: 7 should be: 7 Arr_2_Glob[8][7]: 784662538 should be: Number_Of_Runs + 10 Ptr_Glob-\u003e Ptr_Comp: -1262181728 should be: (implementation-dependent) Discr: 0 should be: 0 Enum_Comp: 2 should be: 2 Int_Comp: 17 should be: 17 Str_Comp: DHRYSTONE PROGRAM, SOME STRING should be: DHRYSTONE PROGRAM, SOME STRING Next_Ptr_Glob-\u003e Ptr_Comp: -1262181728 should be: (implementation-dependent), same as above Discr: 0 should be: 0 Enum_Comp: 1 should be: 1 Int_Comp: 18 should be: 18 Str_Comp: DHRYSTONE PROGRAM, SOME STRING should be: DHRYSTONE PROGRAM, SOME STRING Int_1_Loc: 5 should be: 5 Int_2_Loc: 13 should be: 13 Int_3_Loc: 7 should be: 7 Enum_Loc: 1 should be: 1 Str_1_Loc: DHRYSTONE PROGRAM, 1'ST STRING should be: DHRYSTONE PROGRAM, 1'ST STRING Str_2_Loc: DHRYSTONE PROGRAM, 2'ND STRING should be: DHRYSTONE PROGRAM, 2'ND STRING Microseconds for one run through Dhrystone: 0.0 Dhrystones per Second: 71332960.0 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/dhrystone/:3:2","tags":["dhrystone"],"title":"dhrystone","uri":"/documentation/operating-system/001-linux/099-tools/dhrystone/"},{"categories":null,"content":"本文介绍了如何使用 stressapptest ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:0:0","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 获取源码仓库地址：Github, 最新版本是 V1.0.11 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:1:0","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 下载 wget https://github.com/stressapptest/stressapptest/archive/refs/tags/v1.0.11.tar.gz ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:1:1","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 解压 tar -zxvf v1.0.11.tar.gz -C . \u0026\u0026 cd stressapptest-1.0.11 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:1:2","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 编译源码","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:2:0","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 编译 x86 ./configure \u0026\u0026 make clean \u0026\u0026 make # 查看生成文件 ls src/stressapptest ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:2:1","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 编译 aarch64 # 指定 对应平台的 GCC 路径 MY_CC=/opt/toolchain/aarch64/bin/aarch64-cros-linux-gnu-gcc MY_HOST=\"$(echo $(basename $MY_CC) | sed 's/-gcc$//')\" MY_CXX=\"$(dirname $MY_CC)/$MY_HOST-g++\" ./configure --build=aarch64 --host=\"$MY_HOST\" CC=\"$MY_CC\" CXX=\"$MY_CXX\" make clean \u0026\u0026 make ls src/stressapptest ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:2:2","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 工具使用","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:3:0","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 命令行参数 /data # stressapptest --help Usage: stressapptest [options] -s [?] 指定测试时长 ? 秒 -M [?] 指定内存大小 ? MB -m [?] 指定 copy 线程 ? 个 -i [?] 指定 invert 线程 ? 个 -C [?] 指定 cpu stress 线程 ? 个 -f [?] 新增 disk 线程测试文件 [?] (注: 可指定多个) -l [?] 指定日志输出文件 [?] -W 使用更多CPU压力去压测 ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:3:1","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":" 用途 测试内存 注意 关于测试日志，有几点我们可以关注一下 内存拷贝速度 不同压测环境，观察 DDR 读写速度是否有影响 xxxx/yy/zz-aa:bb:cc(PDT) Stats: Memory Copy: 130562.00M at 2946.00MB/s 测试是否通过 Status: PASS - please verify no corrected errors # -s 测试时长 86400(24hrs) 或 43200(12hrs) 或 28800(8hrs) # -M 测试大小 256M # -m copy 线程 8个 # -W 使用更多CPU压力去压测 stressapptest -s 28800 -M 256 -m 8 -W 日志 / # stressapptest -s 28800 -M 256 -m 8 -W 2024/04/10-20:09:31(PDT) Log: Commandline - stressapptest -s 28800 -M 256 -m 8 -W 2024/04/10-20:09:31(PDT) Stats: SAT revision 1.0.4_autoconf, 64 bit binary 2024/04/10-20:09:31(PDT) Log: Android version from open source release 2024/04/10-20:09:31(PDT) Log: 1 nodes, 2 cpus. 2024/04/10-20:09:31(PDT) Log: Prefer plain malloc memory allocation. 2024/04/10-20:09:31(PDT) Log: Using mmap() allocation at 0x7f7c000000. 2024/04/10-20:09:31(PDT) Stats: Starting SAT, 256M, 28800 seconds 2024/04/10-20:09:32(PDT) Log: Region mask: 0x1 2024/04/10-20:09:42(PDT) Log: Seconds remaining: 28790 2024/04/10-20:09:52(PDT) Log: Seconds remaining: 28780 2024/04/10-20:10:02(PDT) Log: Seconds remaining: 28770 2024/04/10-20:10:12(PDT) Log: Seconds remaining: 28760 ^C2024/04/10-20:10:16(PDT) Log: User exiting early (28756 seconds remaining) 2024/04/10-20:10:17(PDT) Stats: Found 0 hardware incidents 2024/04/10-20:10:17(PDT) Stats: Completed: 130562.00M in 45.01s 2900.81MB/s, with 0 hardware incidents, 0 errors 2024/04/10-20:10:17(PDT) Stats: Memory Copy: 130562.00M at 2946.00MB/s 2024/04/10-20:10:17(PDT) Stats: File Copy: 0.00M at 0.00MB/s 2024/04/10-20:10:17(PDT) Stats: Net Copy: 0.00M at 0.00MB/s 2024/04/10-20:10:17(PDT) Stats: Data Check: 0.00M at 0.00MB/s 2024/04/10-20:10:17(PDT) Stats: Invert Data: 0.00M at 0.00MB/s 2024/04/10-20:10:17(PDT) Stats: Disk: 0.00M at 0.00MB/s 2024/04/10-20:10:17(PDT) 2024/04/10-20:10:17(PDT) Status: PASS - please verify no corrected errors 2024/04/10-20:10:17(PDT) 测试存储 (EMMC, Nand) 注意 关于测试日志，有几点我们可以关注一下 文件拷贝速度 不同压测环境，观察 EMMC 读写速度是否有影响 xxxx/yy/zz-aa:bb:cc(PDT) Stats: File Copy: 2016.00M at 34.50MB/s 测试是否通过 Status: PASS - please verify no corrected errors # -s 测试时长 86400(24hrs) 或 43200(12hrs) 或 28800(8hrs) # -M 测试大小 128M # -f 新增 disk 线程测试文件 /cache/temp1 # -f 新增 disk 线程测试文件 /cache/temp2 # -m copy 线程 0个 # -l 日志输出文件 /data/testfile stressapptest -s 86400 -M 128 -f /cache/temp1 -f /cache/temp2 -m 0 -l /data/testfile 日志 / # stressapptest -s 86400 -M 128 -f /cache/temp1 -f /cache/temp2 -m 0 2024/04/10-19:50:42(PDT) Log: Commandline - stressapptest -s 86400 -M 128 -f /cache/temp1 -f /cache/temp2 -m 0 2024/04/10-19:50:42(PDT) Stats: SAT revision 1.0.4_autoconf, 64 bit binary 2024/04/10-19:50:42(PDT) Log: Android version from open source release 2024/04/10-19:50:42(PDT) Log: 1 nodes, 2 cpus. 2024/04/10-19:50:42(PDT) Log: Prefer plain malloc memory allocation. 2024/04/10-19:50:42(PDT) Log: Using mmap() allocation at 0x7fa4000000. 2024/04/10-19:50:42(PDT) Stats: Starting SAT, 128M, 86400 seconds 2024/04/10-19:50:42(PDT) Log: Region mask: 0x1 2024/04/10-19:50:52(PDT) Log: Seconds remaining: 86390 2024/04/10-19:51:02(PDT) Log: Seconds remaining: 86380 2024/04/10-19:51:12(PDT) Log: Seconds remaining: 86370 2024/04/10-19:51:22(PDT) Log: Seconds remaining: 86360 2024/04/10-19:51:32(PDT) Log: Seconds remaining: 86350 ^C2024/04/10-19:51:40(PDT) Log: User exiting early (86342 seconds remaining) 2024/04/10-19:51:41(PDT) Stats: Found 0 hardware incidents 2024/04/10-19:51:41(PDT) Stats: Completed: 2016.00M in 58.44s 34.50MB/s, with 0 hardware incidents, 0 errors 2024/04/10-19:51:41(PDT) Stats: Memory Copy: 0.00M at 0.00MB/s 2024/04/10-19:51:41(PDT) Stats: File Copy: 2016.00M at 34.50MB/s 2024/04/10-19:51:41(PDT) Stats: Net Copy: 0.00M at 0.00MB/s 2024/04/10-19:51:41(PDT) Stats: Data Check: 0.00M at 0.00MB/s 2024/04/10-19:51:41(PDT) Stats: Invert Data: 0.00M at 0.00MB/s 2024/04/10-19:51:41(PDT) Stats: Disk: 0.00M at 0.00MB/s 2024/04/10-19:51:41(PDT) 2024/04/10-19:51:41(PDT) Status: PASS - please verify no corrected errors 2024/04/10-19:51:41(PDT) ","date":"2024-04-20","objectID":"/documentation/operating-system/001-linux/099-tools/stressapptest/:3:2","tags":["stressapptest"],"title":"stressapptest","uri":"/documentation/operating-system/001-linux/099-tools/stressapptest/"},{"categories":null,"content":"本文介绍了如何使用 stress-ng ","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:0:0","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 获取源码仓库地址：Github, 最新版本是 V0.17.07 ","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:1:0","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 下载 wget https://github.com/ColinIanKing/stress-ng/archive/refs/tags/V0.17.07.tar.gz ","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:1:1","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 解压 tar -zxvf V0.17.07.tar.gz -C . \u0026\u0026 cd stress-ng-0.17.07 ","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:1:2","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 编译源码","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:2:0","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 编译 x86 make clean \u0026\u0026 make # 查看生成文件 ls stress-ng ","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:2:1","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 编译 aarch64 # 指定 对应平台的 GCC 路径 MY_CC=/opt/toolchain/aarch64/bin/aarch64-cros-linux-gnu-gcc MY_HOST=\"$(echo $(basename $MY_CC) | sed 's/-gcc$//')\" MY_CXX=\"$(dirname $MY_CC)/$MY_HOST-g++\" # 编译报错: error: redefinition of ‘struct rseq’ # 需添加 'CFLAGS=-D__GLIBC_HAVE_KERNEL_RSEQ' make clean \u0026\u0026 make CC=$MY_CC CXX=$MY_CXX CFLAGS=-D__GLIBC_HAVE_KERNEL_RSEQ # 查看生成文件 ls stress-ng ","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:2:2","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 工具使用","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:3:0","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 命令行参数 /data # stress-ng --help Usage: stress-ng [options] --matrix [?] 启动 ? 个 worker 进行矩阵运算 -t [?] 设置测试超时时长 [?] 秒 -l [?] 设置CPU Loading 百分比 [?]% --metrics-brief 启用指标并仅显示非零结果 --tz 从 thermal zone 收集温度数据 -v 启用详细输出 ","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:3:1","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"},{"categories":null,"content":" 用途 测试 CPU # --matrix 启动 0 个 worker 进行矩阵运算 # -t 设置测试超时时长为 1440m(24hrs) 或 720m(12hrs) 或 480m(8hrs) # -l 设置 CPU 负载为 80% # --metrics-brief 启用指标并仅显示非零结果 # --tz 从 thermal zone 收集温度数据 # -v 启用详细输出 stress-ng --matrix 0 -t 1440m -l 80 --metrics-brief --tz -v 日志 /data # stress-ng --matrix 0 -t 1m -l 80 --metrics-brief --tz -v stress-ng: debug: [2851] 2 processors online, 2 processors configured stress-ng: info: [2851] dispatching hogs: 2 matrix stress-ng: info: [2851] cache allocate: using built-in defaults as unable to ds stress-ng: info: [2851] cache allocate: default cache size: 2048K stress-ng: debug: [2851] starting stressors stress-ng: debug: [2851] 2 stressors spawned stress-ng: debug: [2852] stress-ng-matrix: started [2852] (instance 0) stress-ng: debug: [2853] stress-ng-matrix: started [2853] (instance 1) stress-ng: debug: [2852] stress-ng-matrix: exited [2852] (instance 0) stress-ng: debug: [2853] stress-ng-matrix: exited [2853] (instance 1) stress-ng: debug: [2851] process [2852] terminated stress-ng: debug: [2851] process [2853] terminated stress-ng: info: [2851] successful run completed in 60.00s (1 min, 0.00 secs) stress-ng: info: [2851] stressor bogo ops real time usr time sys time s stress-ng: info: [2851] (secs) (secs) (secs) ) stress-ng: info: [2851] matrix 46456 60.00 118.51 0.01 7 stress-ng: info: [2851] matrix: stress-ng: info: [2851] thermal 62.50 °C 测试 Memory # -vm 启动 N 个虚拟内存压力器 # -vm-bytes 设置 测试的内存大小 # --timeout 设置 测试时长 stress-ng --vm 1 --vm-bytes 1G --timeout 60s ","date":"2024-04-19","objectID":"/documentation/operating-system/001-linux/099-tools/stress-ng/:3:2","tags":["stress-ng"],"title":"stress-ng","uri":"/documentation/operating-system/001-linux/099-tools/stress-ng/"}]